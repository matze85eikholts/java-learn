


Композиция.
Рассказать о композиции, ассоциации, агрегации

Возможность повторного использования кода принадлежит к числу важнейших преимуществ Java. 
При этом изменения не сводятся к копированию и правке кода.
Существуют два способа повторного использования классов – композиция и наследование. 

При композиции объекты уже имеющихся классов создаются внутри нового класса. Механизм построения нового класса из объектов
существующих классов называется композицией. В этом случае используется функциональность готового кода, а не его структура.
Во втором случае новый класс создается как специализация уже существующего класса. Взяв существующий класс за основу, 
к нему добавляется код без изменения существующего класса. 
Этот механизм называется наследованием, и большую часть работы в нем совершает компилятор. Наследование является одним
из «краеугольных камней» объектно ориентированного программирования.
Между классами существуют разные типы отношений. Самым базовым типом отношений является ассоциация. Это означает, 
что два класса как-то связаны между собой, и мы пока не знаем точно, в чем эта связь выражена, и собираемся уточнить ее в будущем. 
Применительно к созданию классов на основе уже существующих (классов), в широком смысле, используется термин «композиция», т.е. класс создается на основе существующих классов. 
В то же время, в более узком смысле, при создании таких классов
используются термины «композиция» и «агрегация»

Ассоциация является общим случаем композиции и агрегации.
Как композиция, так и агрегация обычно выражаются в том, 
что класс целого содержит свойства своих составных частей.
Разница между композицией и агрегацией заключается в том, 
что  в случае композиции целое явно контролирует время жизни
своей составной части (часть не существует без целого), а в случае
агрегации целое хоть и содержит свою составную часть, время их
жизни не связано (например, составная часть передается через параметры конструктора).
Пример агрегации: Студент входит в Группу любителей физики.
Пример композиции: Машина и Двигатель. Хотя двигатель может быть и без машины, но он вряд ли сможет быть в двух или трех
машинах одновременно, в отличие от студента, который может входить и в другие группы тоже. 
UML-нотация: в UML-нотации композиция обозначается
как линия со стрелкой в виде ромбика, указывающей на свои составляющие. Ромбик всегда находится со стороны целого, а простая
линия со стороны составной части; закрашенный ромб означает более сильную связь – композицию, незакрашенный ромб показывает более слабую связь – агрегацию.
Наиболее часто для описания отношений между классами используется ассоциация в форме композиции или наслед