public class Calculator {
   public int sum(int a, int b) {
	return a + b; 
   }
   
   public boolean evenOrOdd(int number) {
	return number % 2 == 0;
   }
}
--------------------------------------
import org.junit.jupiter.api.Test;

class CalculatorTest {
   @Test
   void sum() {
   	Calculator calculator = new Calculator();
   	int sum = calculator.sum(10, 15);
   	Assertions.assertEquals(25, sum);
   }
   @Test
   void evenOrOdd_evenNumber() {
	Calculator calculator = new Calculator();
	boolean even = calculator.evenOrOdd(10);
	Assertions.assertTrue(even);
   }
   @Test
   void evenOrOdd_oddNumber() {
	Calculator calculator = new Calculator();
	boolean odd = calculatror.evenOrOdd(15);
	Asssertions.assertFalse(odd);

   }
}
//-attemt-2-------------------------------------
import org.junit.jupiter.api.Test;

class CalculatorTest {
   @Test
   void sum() {
	Calculator calculator = new Calculator();
	int sum = calculator.sum(10, 5);
	Assertions.assertEquals(15, sum);
   }
   @Test 
   void evenOrOdd_evenNumber() {
	Calculator calculator = new Calculator();
	boolean even = calculator.evenOrOdd(10);
	Assertions.assertTrue(even);
   }
   @Test
   void evenOrOdd_oddNumber() {
	Calculator calculator = new Calculator();
	boolean odd = calculator.evenOrOdd(15);
	Assertions.assertFalse(odd);
   }
}
//---attempt-3---------------------------------------------------------------
public class Calculator {
   public int sum (int a, int b) {
	return a + b;
   }
   public boolean evenOrOdd(int a) {
	return a % 2 == 0;
   }
   public int divide (int a, int b) {
	return a / b;
   }  
}
---------------------------------------------
import org.junit.jupiter.api.Test;
public class TestCalculator {
   private Calculator calculator;
   
   @BeforeEach
   void setup() {
	calculator = new Calcultor();
   }
   
   @Test
   void divide_byZero() {
	Assertions.assertThrows (ArithmeticException.Class, () -> calculator.divide(10, 0));
   }
}

--------------------------------
public class Calculator {
   public int sum (int a, int b) {
	return a + b;
   }
   public boolean evenOrOdd (int a) {
	return a % 2;
   }
}

-------------------------------------
import org.junit.jupiter.api.Test;

public class TestCalculator {
   @Test
   void sum () {
   	Calculator calculator = new Calculator();
        int sum = calculator.sum(10, 15);
	Assertions.assertEquals(25, sum);
   }
   @Test
   void evenOrOdd_even() {
	Calculator calulator = new Calculator();	
	boolean even = calculator.evenOrOdd(10);
	Assertions.assertTrue(even);
   @Test
   void evenOrOdd_odd() {
   	Calculator = new Calculator();
	boolean odd = calculator.evenOrOdd(15);
	Assertion.asssertFalse(odd);
   }

   }

}
------------------------------------------------
public class Calculator {
   public int sum(int a, int b) {
	return a + b;
   }
   public boolean evenOrOdd() {
	return a % b == 0;
   }
   public int divide (int a, int b) {
	return a / b;
   } 
}

import org.junit.jupiter.api.Test;

public class TestCalculator {
   @Test
   void Sum() {
	Calculator calulator = new Calculator();
        int result = calculator.sum(10, 20);
	Assertion.assertEquals(30, result);
   }
   @Test
   void evenOrOdd_even() {
	Calculator calculator = new Calculator();
	boolean even = calculator.evenOrOdd(10);
	Assertion.assertTrue(even);
   }
   @Test
   void evenOrOdd_even() {
	Calculator calculator = new Calculator();
	boolean odd = calulator.evenOrOdd(11);
	Assertion.assertFalse(odd);
   }
/*---5--times-repeat--*/
   @Test
   void divide_byZero() {
 	Calculator calculator = new Calculator();
	Assertion.assertThrows(ArithmeticException.Class, () -> calculator.divide(10, 0))
   } 
   @Test
   void divide_byZero() {
	Calculator calculator = new Calculator();
	Assertion.assertThrows(ArithmeticException.Class, () -> calculator.divide(10,0));
   }
   @Test
   void divide_byZero() {
	Calculator calculator = new Calculator();
	Assertion.assertThrows(ArithmeticException.Class, ()-> calculator.divide(10,0));
   }
   @Test 
   void divide_byZero() {
	Calculator calculator = new Calculator();
	Assertion.assertThrows(ArithmeticException.Class, ()-> calculator.divide(10,0));
   }
   @Test
   void divide_byZero() {
	Calculator calculator = new Calculator();
	Assertion.assertThrows(ArithmeticException.Class, ()-> calculator.divide(10,0));
   }

}